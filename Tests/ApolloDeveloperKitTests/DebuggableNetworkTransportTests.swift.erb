//
//  DebuggableNetworkTransportTests.swift
//  ApolloDeveloperKitTests
//
//  Created by Ryosuke Ito on 6/17/19.
//  Copyright Â© 2019 Ryosuke Ito. All rights reserved.
//

// <% require 'apollo_version' %>
// <% apollo_version = ApolloVersion.find! %>

import Apollo
import XCTest
@testable import ApolloDeveloperKit

class DebuggableNetworkTransportTests: XCTestCase {
    func testGetClientName() {
        let response: GraphQLResponse<MockGraphQLQuery>? = nil
        let networkTransport = DebuggableNetworkTransport(networkTransport: MockNetworkTransport(response: response, error: nil))
        // <% if apollo_version < '0.19.0' %>
        XCTAssertEqual(networkTransport.clientName, "")
        // <% else %>
        XCTAssertEqual(networkTransport.clientName, "clientName")
        // <% end %>
    }

    func testSetClientName() {
        let response: GraphQLResponse<MockGraphQLQuery>? = nil
        let networkTransport = DebuggableNetworkTransport(networkTransport: MockNetworkTransport(response: response, error: nil))
        networkTransport.clientName = "foo"
        XCTAssertEqual(networkTransport.clientName, "foo")
    }

    func testGetClientVersion() {
        let response: GraphQLResponse<MockGraphQLQuery>? = nil
        let networkTransport = DebuggableNetworkTransport(networkTransport: MockNetworkTransport(response: response, error: nil))
        // <% if apollo_version < '0.19.0' %>
        XCTAssertEqual(networkTransport.clientVersion, "")
        // <% else %>
        XCTAssertEqual(networkTransport.clientVersion, "clientVersion")
        // <% end %>
    }

    func testSetClientVersion() {
        let response: GraphQLResponse<MockGraphQLQuery>? = nil
        let networkTransport = DebuggableNetworkTransport(networkTransport: MockNetworkTransport(response: response, error: nil))
        networkTransport.clientVersion = "foo"
        XCTAssertEqual(networkTransport.clientVersion, "foo")
    }

    func testSendOperationWithCompletionHandler_whenResponseIsNotNilButErrorIsNil() {
        let operation = MockGraphQLQuery()
        let response = GraphQLResponse<MockGraphQLQuery>(operation: operation, body: ["foo": "bar"])
        let networkTransport = DebuggableNetworkTransport(networkTransport: MockNetworkTransport(response: response, error: nil))
        let expectation = self.expectation(description: "completionHandler should be called")
        let cancellable = networkTransport.send(operation: operation) { response, error in
            XCTAssertNotNil(response)
            XCTAssertEqual(response?.body.count, 1)
            XCTAssertNil(error)
            expectation.fulfill()
        }
        XCTAssertTrue(cancellable is MockCancellable)
        waitForExpectations(timeout: 0.25, handler: nil)
    }

    func testSendOperationWithCompletionHandler_whenResponseIsNilAndErrorIsNotNil() {
        let operation = MockGraphQLQuery()
        let response: GraphQLResponse<MockGraphQLQuery>? = nil
        let urlError = URLError(.badURL)
        let networkTransport = DebuggableNetworkTransport(networkTransport: MockNetworkTransport(response: response, error: urlError))
        let expectation = self.expectation(description: "completionHandler should be called")
        let cancellable = networkTransport.send(operation: operation) { response, error in
            XCTAssertNil(response)
            XCTAssertTrue(error as NSError? === urlError as NSError)
            expectation.fulfill()
        }
        XCTAssertTrue(cancellable is MockCancellable)
        waitForExpectations(timeout: 0.25, handler: nil)
    }
}

class MockNetworkTransport: NetworkTransport {
    // <% if apollo_version >= '0.19.0' %>
    var clientName = "clientName"
    var clientVersion = "clientVersion"
    // <% end %>

    private let response: Any?
    private let error: Error?

    init<Operation>(response: GraphQLResponse<Operation>?, error: Error?) where Operation : GraphQLOperation {
        self.response = response
        self.error = error
    }

    func send<Operation>(operation: Operation, completionHandler: @escaping (GraphQLResponse<Operation>?, Error?) -> Void) -> Cancellable where Operation : GraphQLOperation {
        completionHandler(response as? GraphQLResponse<Operation>, error)
        return MockCancellable()
    }

    #if swift(>=5)
    func send<Operation>(operation: Operation, completionHandler: @escaping (Swift.Result<GraphQLResponse<Operation>, Error>) -> Void) -> Cancellable where Operation : GraphQLOperation {
        if let response = response as? GraphQLResponse<Operation> {
            completionHandler(.success(response))
        } else if let error = error {
            completionHandler(.failure(error))
        } else {
            preconditionFailure("Either of response and error should exist")
        }
        return MockCancellable()
    }
    #endif
}

class MockCancellable: Cancellable {
    func cancel() {
        // do nothing
    }
}

class MockGraphQLQuery: GraphQLQuery {
    typealias Data = MockGraphQLSelectionSet

    let operationDefinition = ""
    let operationIdentifier = ""
    let operationName = ""
}

class MockGraphQLSelectionSet: GraphQLSelectionSet {
    static let selections = [GraphQLSelection]()
    let resultMap: ResultMap

    required init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
    }
}
